%% Final scores of the biomarkers 

overlap_thr = config.manuscript_figs_settings.fig_3_settings.overlap_threshold; 

final_stats = readtable(fullfile(config.paths.save_root, config.paths.stat_results_fnames.final_statistics_fname)); 

total_scores = []; 
raw_results = [final_stats.SOZ_in_RA, ...
           final_stats.Spike_in_RA, ...
           final_stats.HFO_in_RA, ...
           final_stats.W_outstr_in_RA, ...
           final_stats.W_outstr_HFO_in_RA]; 
       
results = raw_results >= overlap_thr; 

biomarker_names = ["SOZ", "Spikes", "HFO", "W_outstr", "W_outstr_HFO"];        
       
for i = 1:size(results, 2)
    if i == 5
        [~, scores] = get_status(results(~strcmp(final_stats.InterceptOutstrHFO, 'None'), i), ...
                                 final_stats.outcome(~strcmp(final_stats.InterceptOutstrHFO, 'None'))); 
    else
        [~, scores] = get_status(results(:, i), final_stats.outcome); 
    end 
    total_scores.(biomarker_names(i)) = scores;  
end 

t = ["Accuracy", "Sensitivity", "Specificity", "PPV", "NPV"]; 
for i = 1:length(biomarker_names)
    [Acc, Sens, Spec, PPV, NPV] = get_scores(...
                                        total_scores.(biomarker_names(i)).TP, ... 
                                        total_scores.(biomarker_names(i)).TN, ...
                                        total_scores.(biomarker_names(i)).FP, ...
                                        total_scores.(biomarker_names(i)).FN); 
    t = [t; [Acc, Sens, Spec, PPV, NPV]];                                 
end 
t = [["", biomarker_names]; t']';  


%% number of contacts 

good_outcomes = find(final_stats.outcome == 1); 
poor_outcomes = find(final_stats.outcome == 0); 

num_contacts = readmatrix(fullfile(config.paths.save_root, config.paths.stat_results_fnames.num_contacts_fname)); 

colors = [cmap('red'); cmap('olive'); cmap('yellow'); cmap('purple'); cmap('teal')]; 

boxplot_fig = figure('units', 'normalized', 'outerposition', [0 0 1 .5]);
subplot(1, 8, 1)
create_boxplot(num_contacts(:, 2), ...
               [], ...
               [], ...
               "Number of contacts", ...
               colors(1, :), ...
               'fig_fontsize', fig_fontsize, ...
               'box', 'off', ...
               'tick_length', [0 0], ...
               'linewidth', 1, ...
               'title', "Number of contacts", ...
               'yticks', 'on'); 

subplot(1, 8, 2:3)
create_boxplot(num_contacts(:, 3:6), ...
               [], ...
               ["Spikes", "HFO", "Outstr", "Outstr+HFO"], ...
               "Number of contacts", ...
               colors(2:5, :), ...
               'fig_fontsize', fig_fontsize, ...
               'box', 'off', ...
               'tick_length', [0 0], ...
               'linewidth', 1, ...
               'title', "Number of contacts", ...
               'yticks', 'on', 'xticks', 'on'); 

subplot(1, 8, 4)
create_boxplot([num_contacts(good_outcomes, 2); num_contacts(poor_outcomes, 2)], ...
               [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
               [], ...
               "Number of contacts", ...
               [cmap('dark_blue'); cmap('red')], ...
               'fig_fontsize', fig_fontsize, ...
               'box', 'off', ...
               'tick_length', [0 0], ...
               'linewidth', 1, ...
               'title', "Number of contacts", ...
               'yticks', 'on'); 
                    
titles = ["Spikes", "HFO", "Outstr", "Outstr+HFO"]; 
for i = 3:6
    subplot(1, 8, 2+i)
    create_boxplot([num_contacts(good_outcomes, i); num_contacts(poor_outcomes, i)], ...
                   [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
                   [], ...
                   "Number of contacts", ...
                   [colors(i-1, :); cmap('red')], ...
                   'fig_fontsize', fig_fontsize, ...
                   'box', 'off', ...
                   'tick_length', [0 0], ...
                   'linewidth', 1, ...
                   'title', titles(i-2), ...
                   'yticks', 'on', 'xticks', 'on');    
    p = ranksum(num_contacts(good_outcomes, i), num_contacts(poor_outcomes, i)); 
    hold on; 
    add_p_marker(p, 1.5, max(num_contacts(:, i)), 'marker_color', cmap('light_gray')); 
end 

saveas(boxplot_fig, fullfile(article_figs_saveroot, "contact_numbers.png"))


%% number of propagating and isolated spikes 

stat = readmatrix(fullfile(config.paths.save_root, config.paths.stat_results_fnames.travelling_waves_percents_fname)); 
titles = ["travelling, all chs", "travelling, area chs", "isolated, all chs", "isolated, area chs"]; 

boxplot_fig = figure('units', 'normalized', 'outerposition', [0 0 .7 .5]);

for i = 4:7
    
    subplot(1, 4, i-3)
    
    create_boxplot([stat(good_outcomes, i); stat(poor_outcomes, i)], ...
                  [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
                  ["", ""], ...
                  [], ...
                  [cmap('green'); cmap('red')], ...
                  'box', 'off', ...
                  'tick_length', [0 0], ...
                  'linewidth', 1, ...
                  'title', "Number of " + titles(i-3), ...
                  'fig_fontsize', fig_fontsize, ...
                  'yticks', 'on', 'xticks', 'on');     

    p = ranksum(stat(good_outcomes, i), stat(poor_outcomes, i)); 
    hold on; 
    add_p_marker(p, 1.5, max(stat(:, i)), 'marker_color', cmap('light_gray')); 

end 

saveas(boxplot_fig, fullfile(article_figs_saveroot, "propagating_isolated_spikes.png"))

%% RA size and outstr+HFO overlap, %
final_stats = readtable(fullfile(config.paths.save_root, config.paths.stat_results_fnames.final_statistics_fname)); 

size_ra = final_stats.size_ra; 
outstr_hfo_perc = final_stats.outstr_hfo_perc;  

boxplot_fig = figure('units', 'normalized', 'outerposition', [0 0 .3 .5]);

subplot(1, 2, 1)
create_boxplot([size_ra(good_outcomes); size_ra(poor_outcomes)], ...
              [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
              ["Good", "Poor"], ...
              "RA size", ...
              [cmap('green'); cmap('red')], ...
              'tick_length', [0 0], ...
              'linewidth', 1, ...
              'yticks', 'on', 'xticks', 'on');  
          
title('RA size')

p = ranksum(size_ra(good_outcomes), size_ra(poor_outcomes)); 
hold on; 
add_p_marker(p, 1.5, max(size_ra), 'marker_color', cmap('light_gray')); 

subplot(1, 2, 2)
create_boxplot([outstr_hfo_perc(good_outcomes); outstr_hfo_perc(poor_outcomes)], ...
              [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
              ["Good", "Poor"], ...
              "Overlap Outstr and HFO, %", ...
              [cmap('green'); cmap('red')], ...
              'tick_length', [0 0], ...
              'linewidth', 1, ...
              'yticks', 'on', 'xticks', 'on');  
          
title('Overlap Outstr and HFO, %')

p = ranksum(outstr_hfo_perc(good_outcomes), outstr_hfo_perc(poor_outcomes)); 
hold on; 
add_p_marker(p, 1.5, max(outstr_hfo_perc), 'marker_color', cmap('light_gray')); 

saveas(boxplot_fig, fullfile(article_figs_saveroot, "ra_size.png")); 


%% number of onsets 

onsets = readtable(fullfile(config.paths.save_root, config.paths.stat_results_fnames.onset_numbers_fname)); 
final_stats = readtable(fullfile(config.paths.save_root, config.paths.stat_results_fnames.final_statistics_fname)); 

good_outcomes = find(final_stats.outcome == 1); 
poor_outcomes = find(final_stats.outcome == 0); 

markers = [onsets.Separate_electrodes, onsets.Separate_areas]; 
titles = ["Separate electrodes", "Separate areas"]; 

boxplot_fig = figure('units', 'normalized', 'outerposition', [0 0 .3 .5]);

for i = 1:size(markers, 2)
    
    subplot(1, size(markers, 2), i)
    
    create_boxplot([markers(good_outcomes, i); markers(poor_outcomes, i)], ...
                   [zeros(size(good_outcomes)); ones(size(poor_outcomes))], ...
                   [], ...
                   "Overlap with RA, %", ...
                   [cmap('green'); cmap('red')], ...
                   'fig_fontsize', fig_fontsize, ...
                   'box', 'on', ...
                   'YAxis', 'on', ...
                   'XAxis', 'off', ...
                   'tick_length', [0 0], ...
                   'linewidth', 1, ...
                   'title', titles(i), ...
                   'yticks', 'on'); 
               
    p = ranksum(markers(good_outcomes, i), markers(poor_outcomes, i)); 
    hold on; 
    add_p_marker(p, 1.5, max([markers(good_outcomes, i); markers(poor_outcomes, i)]), 'marker_color', cmap('light_gray')); 
end 

saveas(boxplot_fig, fullfile(article_figs_saveroot, "num_onsets.png")); 
